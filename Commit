git commit이란 코드의 변경 사항을 하나의 의미 있는 버전(수정본)으로 만들어 내 로컬 컴퓨터 저장소에 기록하는 명령어입니다.

가장 쉽게 비유하자면, 게임의 '세이브 포인트(Save Point)'와 같습니다. 🎮

게임을 하다가 중요한 지점에서 저장을 해두면 나중에 실수를 하거나 다른 길로 가보고 싶을 때 언제든 그 지점에서 다시 시작할 수 있죠. 
git commit도 똑같습니다. 기능 하나를 완성했거나, 중요한 버그를 수정했을 때처럼 의미 있는 작업 단위를 커밋으로 남겨두면, 
그 시점의 코드 상태를 하나의 버전으로 저장하게 됩니다.

## Commit은 왜 필요한가요?
변경 이력 추적: 누가, 언제, 무엇을, 왜 바꿨는지 기록에 남겨 프로젝트의 전체 흐름을 파악할 수 있습니다.

쉬운 복구: 코드에 문제가 생겼을 때, 특정 커밋(세이브 포인트) 시점으로 손쉽게 되돌아갈 수 있습니다.

협업의 기준: 팀원들과 코드를 공유하고 합칠 때, 이 커밋 단위를 기준으로 작업을 주고받게 됩니다.

## Commit 과정 (3단계)
Git은 단순히 파일을 저장하는 것이 아니라, 체계적인 3단계 과정을 거칩니다.

Working Directory (작업 공간):

내가 지금 코드를 수정하고 있는 실제 폴더입니다.

Staging Area (스테이지):

커밋할 변경 사항들을 잠시 대기시키는 임시 공간입니다. 작업한 파일 중 저장(커밋)하고 싶은 것만 골라 담는 곳이죠. (git add 명령어로 파일을 올립니다.)

Repository (저장소):

스테이지에 있는 파일들을 git commit 명령어로 하나의 버전(세이브 포인트)으로 만들어 영구적으로 저장하는 최종 공간입니다.

## 기본 사용법
가장 일반적으로 사용하는 방법은 -m 옵션을 사용하여 커밋 메시지를 함께 남기는 것입니다.

Bash

# 1. 변경된 파일을 스테이지에 올린다 (add)
git add 파일명.js
# 또는 모든 변경사항을 올린다
git add .

# 2. 스테이지에 있는 파일들을 하나의 버전으로 저장한다 (commit)
git commit -m "Feat: 로그인 기능 추가"
git add .: 현재 폴더 내에서 변경된 모든 파일들을 스테이지에 올립니다.

git commit -m "메시지": 스테이지에 올라온 파일들을 "메시지"라는 설명과 함께 커밋(저장)합니다. 이 메시지는 나중에 변경 이력을 쉽게 알아보기 위한 것이므로 매우 중요합니다.
